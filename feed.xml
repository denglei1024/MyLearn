<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="rss.xsl" type="text/xsl"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"
>
    <channel>
            <title><![CDATA[邓磊's Blog]]></title>
            <link>https://github.com/denglei1024/denglei1024.github.io</link>
        <atom:link href="https://github.com/denglei1024/denglei1024.github.io/feed.xml" rel="self" type="application/rss+xml" />
            <description><![CDATA[RSS feed of 邓磊's denglei1024.github.io]]></description>
        <generator>IssueBlogAction</generator>
        <webMaster>bxb100@outlook.com (@bxb100)</webMaster>
            <language>zh-cn</language>
            <image>
                <url>https://cdn.jsdelivr.net/gh/denglei1024/denglei1024.github.io/blog.png</url>
                    <title><![CDATA[邓磊's Blog]]></title>
                <link>https://github.com/denglei1024/denglei1024.github.io</link>
            </image>
        <lastBuildDate>Fri, 31 May 2024 01:34:43 GMT</lastBuildDate>
            <item>
                <title><![CDATA[MyBatis是如何进行数据库连接配置的]]></title>
                    <description><![CDATA[<p>MyBatis 是一个流行的持久层框架，它通过使用XML或注解的方式将SQL语句、存储过程和Java方法进行绑定，从而避免了手写大量的JDBC代码和手动设置参数与结果集。以下是 MyBatis 连接数据库的基本步骤和机制：</p>
<blockquote>
<p>MyBatis源码版本：3.5.16</p>
</blockquote>
<p><strong>MyBatis-config.xml 示例</strong></p>
<div class="highlight highlight-text-xml"><pre>&lt;<span class="pl-ent">environments</span> <span class="pl-e">default</span>=<span class="pl-s"><span class="pl-pds">"</span>development<span class="pl-pds">"</span></span>&gt;  
    &lt;<span class="pl-ent">environment</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>development<span class="pl-pds">"</span></span>&gt;  
        &lt;<span class="pl-ent">transactionManager</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>JDBC<span class="pl-pds">"</span></span>/&gt;  
        &lt;<span class="pl-ent">dataSource</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">"</span>POOLED<span class="pl-pds">"</span></span>&gt;  
            &lt;<span class="pl-ent">property</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>driver<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>${db.driver}<span class="pl-pds">"</span></span>/&gt;  
            &lt;<span class="pl-ent">property</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>url<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>${db.url}<span class="pl-pds">"</span></span>/&gt;  
            &lt;<span class="pl-ent">property</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>username<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>${db.username}<span class="pl-pds">"</span></span>/&gt;  
            &lt;<span class="pl-ent">property</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>password<span class="pl-pds">"</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>${db.password}<span class="pl-pds">"</span></span>/&gt;  
        &lt;/<span class="pl-ent">dataSource</span>&gt;  
    &lt;/<span class="pl-ent">environment</span>&gt;  
&lt;/<span class="pl-ent">environments</span>&gt;</pre></div>
<div class="markdown-heading"><h3 class="heading-element">1. 读取配置文件</h3><a id="user-content-1-读取配置文件" class="anchor" aria-label="Permalink: 1. 读取配置文件" href="#1-读取配置文件"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>MyBatis 通过 <code>Resources</code> 类读取配置文件。配置文件通常是 XML 格式，如 <code>mybatis-config.xml</code>。</p>
<div class="markdown-heading"><h4 class="heading-element">关键代码</h4><a id="user-content-关键代码" class="anchor" aria-label="Permalink: 关键代码" href="#关键代码"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">String</span> <span class="pl-s1">resource</span> = <span class="pl-s">"mybatis-config.xml"</span>;
<span class="pl-smi">Reader</span> <span class="pl-s1">reader</span> = <span class="pl-smi">Resources</span>.<span class="pl-en">getResourceAsReader</span>(<span class="pl-s1">resource</span>)</pre></div>
<div class="markdown-heading"><h3 class="heading-element">2. 解析配置文件</h3><a id="user-content-2-解析配置文件" class="anchor" aria-label="Permalink: 2. 解析配置文件" href="#2-解析配置文件"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p><code>SqlSessionFactoryBuilder</code> 使用 <code>XMLConfigBuilder</code> 解析配置文件，将 XML 配置转换为 Java 对象。</p>
<div class="markdown-heading"><h4 class="heading-element">关键代码</h4><a id="user-content-关键代码-1" class="anchor" aria-label="Permalink: 关键代码" href="#关键代码-1"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<div class="highlight highlight-source-java"><pre><span class="pl-smi">SqlSessionFactory</span> <span class="pl-s1">sqlSessionFactory</span> = <span class="pl-k">new</span> <span class="pl-smi">SqlSessionFactoryBuilder</span>().<span class="pl-en">build</span>(<span class="pl-s1">inputStream</span>);

<span class="pl-smi">XMLConfigBuilder</span> <span class="pl-s1">parser</span> = <span class="pl-k">new</span> <span class="pl-smi">XMLConfigBuilder</span>(<span class="pl-s1">reader</span>, <span class="pl-s1">environment</span>, <span class="pl-s1">properties</span>);</pre></div>
<div class="markdown-heading"><h4 class="heading-element">
<code>XMLConfigBuilder</code> 源码片段</h4><a id="user-content-xmlconfigbuilder-源码片段" class="anchor" aria-label="Permalink: XMLConfigBuilder 源码片段" href="#xmlconfigbuilder-源码片段"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<pre><code>private void parseConfiguration(XNode root) {  
  try {  
    // issue #117 先读取属性 
    propertiesElement(root.evalNode("properties"));  
    Properties settings = settingsAsProperties(root.evalNode("settings"));  
    loadCustomVfsImpl(settings);  
    loadCustomLogImpl(settings);  
    typeAliasesElement(root.evalNode("typeAliases"));  
    pluginsElement(root.evalNode("plugins"));  
    objectFactoryElement(root.evalNode("objectFactory"));  
    objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));  
    reflectorFactoryElement(root.evalNode("reflectorFactory"));  
    settingsElement(settings);  
    // read it after objectFactory and objectWrapperFactory issue #631  
    environmentsElement(root.evalNode("environments"));  
    databaseIdProviderElement(root.evalNode("databaseIdProvider"));  
    typeHandlersElement(root.evalNode("typeHandlers"));  
    mappersElement(root.evalNode("mappers"));  
  } catch (Exception e) {  
    throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);  
  }  
}
</code></pre>
<p><code>XMLConfigBuilder</code>解析XML配置，并生成<code>Configuration</code>对象。</p>
<div class="markdown-heading"><h3 class="heading-element">3. 创建 SqlSessionFactory</h3><a id="user-content-3-创建-sqlsessionfactory" class="anchor" aria-label="Permalink: 3. 创建 SqlSessionFactory" href="#3-创建-sqlsessionfactory"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p><code>Configuration</code> 对象包含了所有配置信息，包括环境配置、数据源配置等。<code>SqlSessionFactoryBuilder</code> 使用 <code>Configuration</code> 创建 <code>DefaultSqlSessionFactory</code>。</p>
<div class="markdown-heading"><h4 class="heading-element">关键代码</h4><a id="user-content-关键代码-2" class="anchor" aria-label="Permalink: 关键代码" href="#关键代码-2"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-smi">SqlSessionFactory</span> <span class="pl-s1">build</span>(<span class="pl-smi">Configuration</span> <span class="pl-s1">config</span>) {  
  <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-smi">DefaultSqlSessionFactory</span>(<span class="pl-s1">config</span>);  
}</pre></div>
<div class="markdown-heading"><h3 class="heading-element">4. 建立数据库连接</h3><a id="user-content-4-建立数据库连接" class="anchor" aria-label="Permalink: 4. 建立数据库连接" href="#4-建立数据库连接"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p><code>DefaultSqlSessionFactory</code> 创建 <code>SqlSession</code> 时，通过 <code>Environment</code> 配置和 <code>DataSource</code> 获取数据库连接。</p>
<div class="markdown-heading"><h4 class="heading-element">
<code>DefaultSqlSessionFactory</code> 源码片段</h4><a id="user-content-defaultsqlsessionfactory-源码片段" class="anchor" aria-label="Permalink: DefaultSqlSessionFactory 源码片段" href="#defaultsqlsessionfactory-源码片段"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-smi">SqlSession</span> <span class="pl-s1">openSession</span>() {  
  <span class="pl-k">return</span> <span class="pl-en">openSessionFromDataSource</span>(<span class="pl-s1">configuration</span>.<span class="pl-en">getDefaultExecutorType</span>(), <span class="pl-c1">null</span>, <span class="pl-c1">false</span>);  
}</pre></div>
<p><code>openSessionFromDataSource</code> 方法中，<code>DataSource</code> 被用于获取数据库连接。</p>
<div class="markdown-heading"><h4 class="heading-element">关键代码</h4><a id="user-content-关键代码-3" class="anchor" aria-label="Permalink: 关键代码" href="#关键代码-3"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<div class="highlight highlight-source-java"><pre><span class="pl-k">private</span> <span class="pl-smi">SqlSession</span> <span class="pl-s1">openSessionFromDataSource</span>(<span class="pl-smi">ExecutorType</span> <span class="pl-s1">execType</span>, <span class="pl-smi">TransactionIsolationLevel</span> <span class="pl-s1">level</span>,  
    <span class="pl-smi">boolean</span> <span class="pl-s1">autoCommit</span>) {  
  <span class="pl-c">//环境配置  </span>
  <span class="pl-k">final</span> <span class="pl-smi">Environment</span> <span class="pl-s1">environment</span> = <span class="pl-s1">configuration</span>.<span class="pl-en">getEnvironment</span>();  
  <span class="pl-c">//事务工厂  </span>
  <span class="pl-k">final</span> <span class="pl-smi">TransactionFactory</span> <span class="pl-s1">transactionFactory</span> = <span class="pl-en">getTransactionFactoryFromEnvironment</span>(<span class="pl-s1">environment</span>);  
  <span class="pl-c">//创建事务  </span>
  <span class="pl-smi">Transaction</span> <span class="pl-s1">tx</span> = <span class="pl-s1">transactionFactory</span>.<span class="pl-en">newTransaction</span>(<span class="pl-s1">environment</span>.<span class="pl-en">getDataSource</span>(), <span class="pl-s1">level</span>, <span class="pl-s1">autoCommit</span>);  
  <span class="pl-c">//创建执行器  </span>
  <span class="pl-k">final</span> <span class="pl-smi">Executor</span> <span class="pl-s1">executor</span> = <span class="pl-s1">configuration</span>.<span class="pl-en">newExecutor</span>(<span class="pl-s1">tx</span>, <span class="pl-s1">execType</span>);  
  <span class="pl-c">//返回SqlSession  </span>
  <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-smi">DefaultSqlSession</span>(<span class="pl-s1">configuration</span>, <span class="pl-s1">executor</span>, <span class="pl-s1">autoCommit</span>);
}</pre></div>
<div class="markdown-heading"><h3 class="heading-element">5. 数据源配置</h3><a id="user-content-5-数据源配置" class="anchor" aria-label="Permalink: 5. 数据源配置" href="#5-数据源配置"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p><code>DataSource</code> 配置在 <code>mybatis-config.xml</code> 文件中，通过 <code>DataSourceFactory</code> 创建具体的数据源实例。</p>
<div class="markdown-heading"><h4 class="heading-element">关键代码</h4><a id="user-content-关键代码-4" class="anchor" aria-label="Permalink: 关键代码" href="#关键代码-4"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<div class="highlight highlight-source-java"><pre><span class="pl-c">// 获取数据源工厂</span>
<span class="pl-smi">String</span> <span class="pl-s1">type</span> = <span class="pl-s1">context</span>.<span class="pl-en">getStringAttribute</span>(<span class="pl-s">"type"</span>);  
<span class="pl-smi">Properties</span> <span class="pl-s1">props</span> = <span class="pl-s1">context</span>.<span class="pl-en">getChildrenAsProperties</span>();  
<span class="pl-smi">DataSourceFactory</span> <span class="pl-s1">factory</span> = (<span class="pl-smi">DataSourceFactory</span>) <span class="pl-en">resolveClass</span>(<span class="pl-s1">type</span>).<span class="pl-en">getDeclaredConstructor</span>().<span class="pl-en">newInstance</span>();  
<span class="pl-s1">factory</span>.<span class="pl-en">setProperties</span>(<span class="pl-s1">props</span>);    
<span class="pl-c">// 获取数据源</span>
<span class="pl-smi">DataSource</span> <span class="pl-s1">dataSource</span> = <span class="pl-s1">factory</span>.<span class="pl-en">getDataSource</span>();</pre></div>
<div class="markdown-heading"><h3 class="heading-element">总结</h3><a id="user-content-总结" class="anchor" aria-label="Permalink: 总结" href="#总结"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>MyBatis连接数据库的步骤包括：</p>
<ol>
<li>
<strong>读取配置文件</strong>：通过 <code>Resources</code> 类读取 XML 文件。</li>
<li>
<strong>解析配置文件</strong>：使用 <code>XMLConfigBuilder</code> 解析 XML，生成 <code>Configuration</code> 对象。</li>
<li>
<strong>创建 SqlSessionFactory</strong>：使用 <code>SqlSessionFactoryBuilder</code> 和 <code>Configuration</code> 创建 <code>DefaultSqlSessionFactory</code>。</li>
<li>
<strong>建立数据库连接</strong>：<code>DefaultSqlSessionFactory</code> 创建 <code>SqlSession</code>，使用 <code>DataSource</code> 获取数据库连接。</li>
</ol>
]]></description>
                    <pubDate>Fri, 31 May 2024 00:52:02 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/denglei1024/denglei1024.github.io/issues/4</guid>
                <link>https://github.com/denglei1024/denglei1024.github.io/issues/4</link>
                    <author><![CDATA[denglei1024]]></author>
            </item>
            <item>
                <title><![CDATA[Java的参数是值传递，不是引用传递，不要误解了]]></title>
                    <description><![CDATA[<div class="markdown-heading"><h2 class="heading-element">引言</h2><a id="user-content-引言" class="anchor" aria-label="Permalink: 引言" href="#引言"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>没有特殊情况，Java中的参数是按值传递给方法的，也就是把变量的副本传递给该方法。对于值类型，将值的副本传递给方法。对于引用类型，将引用的副本传递给方法。
术语“按值传递”和“按引用传递”有明确定义，但是现在有点滥用，我们一起来纠正这个说法。</p>
<div class="markdown-heading"><h2 class="heading-element">按值传递</h2><a id="user-content-按值传递" class="anchor" aria-label="Permalink: 按值传递" href="#按值传递"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>一种传递形参的方法，这种方法将实参复制到对应的形参中，形参和实参存储在不同的位置上。</p>
<div class="markdown-heading"><h2 class="heading-element">按引用传递</h2><a id="user-content-按引用传递" class="anchor" aria-label="Permalink: 按引用传递" href="#按引用传递"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p>
<div class="markdown-heading"><h2 class="heading-element">测试示例</h2><a id="user-content-测试示例" class="anchor" aria-label="Permalink: 测试示例" href="#测试示例"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>我这里写了一段测试代码，请你一起来运行看下结果。</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">Example</span> {  
    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-s1">Value</span>;  
  
    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">void</span> <span class="pl-en">main</span>(<span class="pl-smi">String</span>[] <span class="pl-s1">args</span>) {  
        <span class="pl-smi">Example</span> <span class="pl-s1">ex</span> = <span class="pl-k">new</span> <span class="pl-smi">Example</span>();  
        <span class="pl-s1">ex</span>.<span class="pl-s1">Value</span> =<span class="pl-s">"hello"</span>;  
        <span class="pl-en">fooObject</span>(<span class="pl-s1">ex</span>);  
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s">"ex="</span>+ <span class="pl-s1">ex</span>.<span class="pl-s1">Value</span>); 
    }
  
    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">void</span> <span class="pl-en">fooObject</span>(<span class="pl-smi">Example</span> <span class="pl-s1">a</span>){  
        <span class="pl-s1">a</span>.<span class="pl-s1">Value</span> += <span class="pl-s">", world!"</span>;  <span class="pl-c">// AAA</span>
        <span class="pl-s1">a</span> = <span class="pl-k">new</span> <span class="pl-smi">Example</span>();      <span class="pl-c">// BBB</span>
        <span class="pl-s1">a</span>.<span class="pl-s1">Value</span> = <span class="pl-s">"你好，世界！"</span>;  <span class="pl-c">// CCC</span>
    }  
}</pre></div>
<p>如果你也运行的话，应该会和我得到一样的输出结果：</p>
<pre><code>ex=hello, world!
</code></pre>
<p>Java中引用类型变量，存储的是数据在堆里的指针，传递到方法的是指针的副本，假设变量<code>ex</code>的存储的指针是10，那么在<code>fooObject</code>函数的参数<code>a</code>存储的指针也是10。运行到 AAA 行，通过指针修改了堆中的数据，此时<code>ex</code>也是受影响。</p>
<p>运行到 BBB 行时，会在堆内存申请新的空间，假设这块空间的指针是 89，那么此时 变量<code>a</code>存储的就是 89，在 CCC 行修改堆中的数据，对<code>ex</code>是没有影响的，因此最后的打印结果是 AAA 行改变后的值。
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b5c88df005f756bef0e06f23a3c75d1b22e00d3c6233425e7a4cd45c6cbab6cf/68747470733a2f2f6e6f74652d313235313636383634372e636f732e61702d6e616e6a696e672e6d7971636c6f75642e636f6d2f32303234303530393138303135362e706e67"><img src="https://camo.githubusercontent.com/b5c88df005f756bef0e06f23a3c75d1b22e00d3c6233425e7a4cd45c6cbab6cf/68747470733a2f2f6e6f74652d313235313636383634372e636f732e61702d6e616e6a696e672e6d7971636c6f75642e636f6d2f32303234303530393138303135362e706e67" alt="image.png" data-canonical-src="https://note-1251668647.cos.ap-nanjing.myqcloud.com/20240509180156.png" style="max-width: 100%;"></a></p>
<div class="markdown-heading"><h2 class="heading-element">总结</h2><a id="user-content-总结" class="anchor" aria-label="Permalink: 总结" href="#总结"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>这篇文章主要通过示例解释Java中的对象是按值传递的，没有按引用传递的说法。</p>
<div class="markdown-heading"><h2 class="heading-element">参考资料：</h2><a id="user-content-参考资料" class="anchor" aria-label="Permalink: 参考资料：" href="#参考资料"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<ul>
<li><a href="https://javaguide.cn/java/basis/why-there-only-value-passing-in-java.html#%E5%BD%A2%E5%8F%82-%E5%AE%9E%E5%8F%82" rel="nofollow">Java值传递详解</a></li>
</ul>
]]></description>
                    <pubDate>Fri, 31 May 2024 00:26:18 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/denglei1024/denglei1024.github.io/issues/6</guid>
                <link>https://github.com/denglei1024/denglei1024.github.io/issues/6</link>
                    <author><![CDATA[denglei1024]]></author>
            </item>
            <item>
                <title><![CDATA[MyBatis的Mapper是如何工作的]]></title>
                    <description><![CDATA[<div class="markdown-heading"><h2 class="heading-element">介绍</h2><a id="user-content-介绍" class="anchor" aria-label="Permalink: 介绍" href="#介绍"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>本文将介绍MyBatis的Mapper接口如何跟映射文件关联起来。</p>
<div class="markdown-heading"><h3 class="heading-element">1、配置</h3><a id="user-content-1配置" class="anchor" aria-label="Permalink: 1、配置" href="#1配置"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>在MyBatis的配置文件中，可以指定Mapper接口。示例中，<code>mapper</code>标签指定了Mapper接口的类或者具体的文件位置：</p>
<div class="highlight highlight-text-xml"><pre>&lt;<span class="pl-ent">configuration</span>&gt;
    &lt;<span class="pl-ent">mappers</span>&gt;
    	&lt;<span class="pl-ent">mapper</span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">"</span>com.github.denglei1024.UserMapper<span class="pl-pds">"</span></span>/&gt;
    	或者
        &lt;<span class="pl-ent">mapper</span> <span class="pl-e">resource</span>=<span class="pl-s"><span class="pl-pds">"</span>UserMapper.xml<span class="pl-pds">"</span></span>/&gt;
    &lt;/<span class="pl-ent">mappers</span>&gt;
&lt;/<span class="pl-ent">configuration</span>&gt;</pre></div>
<div class="markdown-heading"><h3 class="heading-element">2、加载</h3><a id="user-content-2加载" class="anchor" aria-label="Permalink: 2、加载" href="#2加载"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>加载资源有多种方式，入口方法在<code>XMLConfigBuilder</code>的<code>mappersElement</code>中，关键代码如下：</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">private</span> <span class="pl-smi">void</span> <span class="pl-s1">mappersElement</span>(<span class="pl-smi">XNode</span> <span class="pl-s1">context</span>) {
  <span class="pl-k">for</span> (<span class="pl-smi">XNode</span> <span class="pl-s1">child</span> : <span class="pl-s1">context</span>.<span class="pl-en">getChildren</span>()) {
    <span class="pl-k">if</span> (<span class="pl-s">"package"</span>.<span class="pl-en">equals</span>(<span class="pl-s1">child</span>.<span class="pl-en">getName</span>())) {
      <span class="pl-smi">String</span> <span class="pl-s1">mapperPackage</span> = <span class="pl-s1">child</span>.<span class="pl-en">getStringAttribute</span>(<span class="pl-s">"name"</span>);
      <span class="pl-s1">configuration</span>.<span class="pl-en">addMappers</span>(<span class="pl-s1">mapperPackage</span>);
    } <span class="pl-k">else</span> {
      <span class="pl-smi">String</span> <span class="pl-s1">resource</span> = <span class="pl-s1">child</span>.<span class="pl-en">getStringAttribute</span>(<span class="pl-s">"resource"</span>);
      <span class="pl-smi">String</span> <span class="pl-s1">url</span> = <span class="pl-s1">child</span>.<span class="pl-en">getStringAttribute</span>(<span class="pl-s">"url"</span>);
      <span class="pl-smi">String</span> <span class="pl-s1">mapperClass</span> = <span class="pl-s1">child</span>.<span class="pl-en">getStringAttribute</span>(<span class="pl-s">"class"</span>);
      <span class="pl-k">if</span> (<span class="pl-s1">resource</span> != <span class="pl-c1">null</span> &amp;&amp; <span class="pl-s1">url</span> == <span class="pl-c1">null</span> &amp;&amp; <span class="pl-s1">mapperClass</span> == <span class="pl-c1">null</span>) {
        <span class="pl-smi">ErrorContext</span>.<span class="pl-en">instance</span>().<span class="pl-en">resource</span>(<span class="pl-s1">resource</span>);
        <span class="pl-k">try</span> (<span class="pl-smi">InputStream</span> <span class="pl-s1">inputStream</span> = <span class="pl-smi">Resources</span>.<span class="pl-en">getResourceAsStream</span>(<span class="pl-s1">resource</span>)) {
          <span class="pl-smi">XMLMapperBuilder</span> <span class="pl-s1">mapperParser</span> = <span class="pl-k">new</span> <span class="pl-smi">XMLMapperBuilder</span>(<span class="pl-s1">inputStream</span>, <span class="pl-s1">configuration</span>, <span class="pl-s1">resource</span>,
              <span class="pl-s1">configuration</span>.<span class="pl-en">getSqlFragments</span>());
          <span class="pl-s1">mapperParser</span>.<span class="pl-en">parse</span>();
        }
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s1">resource</span> == <span class="pl-c1">null</span> &amp;&amp; <span class="pl-s1">url</span> != <span class="pl-c1">null</span> &amp;&amp; <span class="pl-s1">mapperClass</span> == <span class="pl-c1">null</span>) {
        <span class="pl-smi">ErrorContext</span>.<span class="pl-en">instance</span>().<span class="pl-en">resource</span>(<span class="pl-s1">url</span>);
        <span class="pl-k">try</span> (<span class="pl-smi">InputStream</span> <span class="pl-s1">inputStream</span> = <span class="pl-smi">Resources</span>.<span class="pl-en">getUrlAsStream</span>(<span class="pl-s1">url</span>)) {
          <span class="pl-smi">XMLMapperBuilder</span> <span class="pl-s1">mapperParser</span> = <span class="pl-k">new</span> <span class="pl-smi">XMLMapperBuilder</span>(<span class="pl-s1">inputStream</span>, <span class="pl-s1">configuration</span>, <span class="pl-s1">url</span>,
              <span class="pl-s1">configuration</span>.<span class="pl-en">getSqlFragments</span>());
          <span class="pl-s1">mapperParser</span>.<span class="pl-en">parse</span>();
        }
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s1">resource</span> == <span class="pl-c1">null</span> &amp;&amp; <span class="pl-s1">url</span> == <span class="pl-c1">null</span> &amp;&amp; <span class="pl-s1">mapperClass</span> != <span class="pl-c1">null</span>) {
        <span class="pl-smi">Class</span> <span class="pl-s1">mapperInterface</span> = <span class="pl-smi">Resources</span>.<span class="pl-en">classForName</span>(<span class="pl-s1">mapperClass</span>);
        <span class="pl-s1">configuration</span>.<span class="pl-en">addMapper</span>(<span class="pl-s1">mapperInterface</span>);
      } <span class="pl-k">else</span> {
        <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">BuilderException</span>(
            <span class="pl-s">"A mapper element may only specify a url, resource or class, but not more than one."</span>);
      }
    }
  }</pre></div>
<div class="markdown-heading"><h3 class="heading-element">3、注册</h3><a id="user-content-3注册" class="anchor" aria-label="Permalink: 3、注册" href="#3注册"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>解析完文件后，<code>MapperRegistry</code>类负责Mapper接口的注册和查找。</p>
<div class="highlight highlight-source-java"><pre>  <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">Configuration</span>{
      <span class="pl-k">protected</span> <span class="pl-k">final</span> <span class="pl-smi">MapperRegistry</span> <span class="pl-s1">mapperRegistry</span> = <span class="pl-k">new</span> <span class="pl-smi">MapperRegistry</span>(<span class="pl-smi">this</span>);
      <span class="pl-k">public</span>  <span class="pl-smi">void</span> <span class="pl-en">addMapper</span>(<span class="pl-smi">Class</span> <span class="pl-s1">type</span>) {
        <span class="pl-s1">mapperRegistry</span>.<span class="pl-en">addMapper</span>(<span class="pl-s1">type</span>);
    }
  }</pre></div>
<div class="markdown-heading"><h3 class="heading-element">4、解析</h3><a id="user-content-4解析" class="anchor" aria-label="Permalink: 4、解析" href="#4解析"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>MyBatis使用动态代理机制为Mapper接口生成实现类。调用<code>SqlSession.getMapper(Class type)</code>方法时，会创建Mapper接口的动态代理对象。</p>
<div class="highlight highlight-source-java"><pre> <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">DefaultSqlSession</span>{
    <span class="pl-c1">@</span><span class="pl-c1">Override</span>
    <span class="pl-k">public</span>  <span class="pl-smi">T</span> <span class="pl-en">getMapper</span>(<span class="pl-smi">Class</span> <span class="pl-s1">type</span>) {
      <span class="pl-k">return</span> <span class="pl-s1">configuration</span>.<span class="pl-en">getMapper</span>(<span class="pl-s1">type</span>, <span class="pl-smi">this</span>);
    }
  }

  <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">Configuration</span>{
    <span class="pl-k">public</span>  <span class="pl-smi">T</span> <span class="pl-en">getMapper</span>(<span class="pl-smi">Class</span> <span class="pl-s1">type</span>, <span class="pl-smi">SqlSession</span> <span class="pl-s1">sqlSession</span>) {
      <span class="pl-k">return</span> <span class="pl-s1">mapperRegistry</span>.<span class="pl-en">getMapper</span>(<span class="pl-s1">type</span>, <span class="pl-s1">sqlSession</span>);
    }
  }</pre></div>
<p><code>MapperRegistry</code>会使用<code>MapperProxyFactory</code>为Mapper接口创建代理实例。</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">MapperRegistry</span> {
    <span class="pl-k">public</span>  <span class="pl-smi">T</span> <span class="pl-en">getMapper</span>(<span class="pl-smi">Class</span> <span class="pl-s1">type</span>, <span class="pl-smi">SqlSession</span> <span class="pl-s1">sqlSession</span>) {
      <span class="pl-k">final</span> <span class="pl-smi">MapperProxyFactory</span> <span class="pl-s1">mapperProxyFactory</span> = (<span class="pl-smi">MapperProxyFactory</span>) <span class="pl-s1">knownMappers</span>.<span class="pl-en">get</span>(<span class="pl-s1">type</span>);
      <span class="pl-k">if</span> (<span class="pl-s1">mapperProxyFactory</span> == <span class="pl-c1">null</span>) {
        <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">BindingException</span>(<span class="pl-s">"Type "</span> + <span class="pl-s1">type</span> + <span class="pl-s">" is not known to the MapperRegistry."</span>);
      }
      <span class="pl-k">try</span> {
        <span class="pl-k">return</span> <span class="pl-s1">mapperProxyFactory</span>.<span class="pl-en">newInstance</span>(<span class="pl-s1">sqlSession</span>);
      } <span class="pl-k">catch</span> (<span class="pl-smi">Exception</span> <span class="pl-s1">e</span>) {
        <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">BindingException</span>(<span class="pl-s">"Error getting mapper instance. Cause: "</span> + <span class="pl-s1">e</span>, <span class="pl-s1">e</span>);
      }
    }
}  	  </pre></div>
<div class="markdown-heading"><h3 class="heading-element">5、执行</h3><a id="user-content-5执行" class="anchor" aria-label="Permalink: 5、执行" href="#5执行"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>当调用Mapper接口的方法时，动态代理会拦截方法调用，并将其转换为SQL语句的执行。具体执行逻辑由<code>MapperMethod</code>类处理。</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">MapperProxy</span>{
    <span class="pl-k">public</span> <span class="pl-smi">Object</span> <span class="pl-en">invoke</span>(<span class="pl-smi">Object</span> <span class="pl-s1">proxy</span>, <span class="pl-smi">Method</span> <span class="pl-s1">method</span>, <span class="pl-smi">Object</span>[] <span class="pl-s1">args</span>) <span class="pl-k">throws</span> <span class="pl-smi">Throwable</span> {
      <span class="pl-k">try</span> {
        <span class="pl-k">if</span> (<span class="pl-smi">Object</span>.<span class="pl-k">class</span>.<span class="pl-en">equals</span>(<span class="pl-s1">method</span>.<span class="pl-en">getDeclaringClass</span>())) {
          <span class="pl-k">return</span> <span class="pl-s1">method</span>.<span class="pl-en">invoke</span>(<span class="pl-smi">this</span>, <span class="pl-s1">args</span>);
        }
        <span class="pl-k">return</span> <span class="pl-en">cachedInvoker</span>(<span class="pl-s1">method</span>).<span class="pl-en">invoke</span>(<span class="pl-s1">proxy</span>, <span class="pl-s1">method</span>, <span class="pl-s1">args</span>, <span class="pl-s1">sqlSession</span>);
      } <span class="pl-k">catch</span> (<span class="pl-smi">Throwable</span> <span class="pl-s1">t</span>) {
        <span class="pl-k">throw</span> <span class="pl-smi">ExceptionUtil</span>.<span class="pl-en">unwrapThrowable</span>(<span class="pl-s1">t</span>);
      }
    }
  }</pre></div>
<p><code>MapperMethod</code>会根据方法和参数生成SQL语句，并通过<code>Executor</code>执行SQL语句，返回结果。</p>
<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-smi">Object</span> <span class="pl-s1">execute</span>(<span class="pl-smi">SqlSession</span> <span class="pl-s1">sqlSession</span>, <span class="pl-smi">Object</span>[] <span class="pl-s1">args</span>) {
  <span class="pl-smi">Object</span> <span class="pl-s1">result</span>;
  <span class="pl-k">switch</span> (<span class="pl-s1">command</span>.<span class="pl-en">getType</span>()) {
    <span class="pl-k">case</span> <span class="pl-c1">INSERT</span>: {
      <span class="pl-smi">Object</span> <span class="pl-s1">param</span> = <span class="pl-s1">method</span>.<span class="pl-en">convertArgsToSqlCommandParam</span>(<span class="pl-s1">args</span>);
      <span class="pl-s1">result</span> = <span class="pl-en">rowCountResult</span>(<span class="pl-s1">sqlSession</span>.<span class="pl-en">insert</span>(<span class="pl-s1">command</span>.<span class="pl-en">getName</span>(), <span class="pl-s1">param</span>));
      <span class="pl-k">break</span>;
    }
    <span class="pl-k">case</span> <span class="pl-c1">UPDATE</span>: {
      <span class="pl-smi">Object</span> <span class="pl-s1">param</span> = <span class="pl-s1">method</span>.<span class="pl-en">convertArgsToSqlCommandParam</span>(<span class="pl-s1">args</span>);
      <span class="pl-s1">result</span> = <span class="pl-en">rowCountResult</span>(<span class="pl-s1">sqlSession</span>.<span class="pl-en">update</span>(<span class="pl-s1">command</span>.<span class="pl-en">getName</span>(), <span class="pl-s1">param</span>));
      <span class="pl-k">break</span>;
    }
    <span class="pl-k">case</span> <span class="pl-c1">DELETE</span>: {
      <span class="pl-smi">Object</span> <span class="pl-s1">param</span> = <span class="pl-s1">method</span>.<span class="pl-en">convertArgsToSqlCommandParam</span>(<span class="pl-s1">args</span>);
      <span class="pl-s1">result</span> = <span class="pl-en">rowCountResult</span>(<span class="pl-s1">sqlSession</span>.<span class="pl-en">delete</span>(<span class="pl-s1">command</span>.<span class="pl-en">getName</span>(), <span class="pl-s1">param</span>));
      <span class="pl-k">break</span>;
    }
    <span class="pl-k">case</span> <span class="pl-c1">SELECT</span>:
      <span class="pl-k">if</span> (<span class="pl-s1">method</span>.<span class="pl-en">returnsVoid</span>() &amp;&amp; <span class="pl-s1">method</span>.<span class="pl-en">hasResultHandler</span>()) {
        <span class="pl-en">executeWithResultHandler</span>(<span class="pl-s1">sqlSession</span>, <span class="pl-s1">args</span>);
        <span class="pl-s1">result</span> = <span class="pl-c1">null</span>;
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s1">method</span>.<span class="pl-en">returnsMany</span>()) {
        <span class="pl-s1">result</span> = <span class="pl-en">executeForMany</span>(<span class="pl-s1">sqlSession</span>, <span class="pl-s1">args</span>);
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s1">method</span>.<span class="pl-en">returnsMap</span>()) {
        <span class="pl-s1">result</span> = <span class="pl-en">executeForMap</span>(<span class="pl-s1">sqlSession</span>, <span class="pl-s1">args</span>);
      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s1">method</span>.<span class="pl-en">returnsCursor</span>()) {
        <span class="pl-s1">result</span> = <span class="pl-en">executeForCursor</span>(<span class="pl-s1">sqlSession</span>, <span class="pl-s1">args</span>);
      } <span class="pl-k">else</span> {
        <span class="pl-smi">Object</span> <span class="pl-s1">param</span> = <span class="pl-s1">method</span>.<span class="pl-en">convertArgsToSqlCommandParam</span>(<span class="pl-s1">args</span>);
        <span class="pl-s1">result</span> = <span class="pl-s1">sqlSession</span>.<span class="pl-en">selectOne</span>(<span class="pl-s1">command</span>.<span class="pl-en">getName</span>(), <span class="pl-s1">param</span>);
        <span class="pl-k">if</span> (<span class="pl-s1">method</span>.<span class="pl-en">returnsOptional</span>() &amp;&amp; (<span class="pl-s1">result</span> == <span class="pl-c1">null</span> || !<span class="pl-s1">method</span>.<span class="pl-en">getReturnType</span>().<span class="pl-en">equals</span>(<span class="pl-s1">result</span>.<span class="pl-en">getClass</span>()))) {
          <span class="pl-s1">result</span> = <span class="pl-smi">Optional</span>.<span class="pl-en">ofNullable</span>(<span class="pl-s1">result</span>);
        }
      }
      <span class="pl-k">break</span>;
    <span class="pl-k">case</span> <span class="pl-c1">FLUSH</span>:
      <span class="pl-s1">result</span> = <span class="pl-s1">sqlSession</span>.<span class="pl-en">flushStatements</span>();
      <span class="pl-k">break</span>;
    <span class="pl-k">default</span>:
      <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">BindingException</span>(<span class="pl-s">"Unknown execution method for: "</span> + <span class="pl-s1">command</span>.<span class="pl-en">getName</span>());
  }
  <span class="pl-k">if</span> (<span class="pl-s1">result</span> == <span class="pl-c1">null</span> &amp;&amp; <span class="pl-s1">method</span>.<span class="pl-en">getReturnType</span>().<span class="pl-en">isPrimitive</span>() &amp;&amp; !<span class="pl-s1">method</span>.<span class="pl-en">returnsVoid</span>()) {
    <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-smi">BindingException</span>(<span class="pl-s">"Mapper method '"</span> + <span class="pl-s1">command</span>.<span class="pl-en">getName</span>()
        + <span class="pl-s">"' attempted to return null from a method with a primitive return type ("</span> + <span class="pl-s1">method</span>.<span class="pl-en">getReturnType</span>() + <span class="pl-s">")."</span>);
  }
  <span class="pl-k">return</span> <span class="pl-s1">result</span>;
 }</pre></div>
<div class="markdown-heading"><h2 class="heading-element">总结</h2><a id="user-content-总结" class="anchor" aria-label="Permalink: 总结" href="#总结"><span aria-hidden="true" class="octicon octicon-link"></span></a></div>
<p>本文介绍了MyBatis中Mapper从定义到使用的过程，从源码角度演示了Mapper的定义、加载、注册、查找和执行操作的一系列过程，希望对你有帮助。</p>
]]></description>
                    <pubDate>Fri, 31 May 2024 00:24:03 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/denglei1024/denglei1024.github.io/issues/5</guid>
                <link>https://github.com/denglei1024/denglei1024.github.io/issues/5</link>
                    <author><![CDATA[denglei1024]]></author>
            </item>
    </channel>
</rss>
